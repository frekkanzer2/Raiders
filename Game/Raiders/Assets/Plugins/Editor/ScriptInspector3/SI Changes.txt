-------------------------------------
SCRIPT INSPECTOR 3
version 3.0.28, March 2021
Copyright Â© 2012-2020, Flipbook Games
-------------------------------------


Unity's legendary editor for C#, UnityScript, Boo, Shaders, and text, now transformed into an advanced C# IDE!!!


IMPORTANT NOTE to all OS X users with Unity 2018.x, Unity 2017.x, and 5.x, either Personal or Professional, and Unity 4.x Pro:

You may want to extend Si3's functionality with @inventor2010's amazing free plugin posted here:
	http://forum.unity3d.com/threads/script-inspector-3.195218/page-13#post-2226154

The plugin allows handling of Cmd-S, Cmd-Z, and Shift-Cmd-Z in Unity on OS X for more natural shortcuts for Save, Undo, and Redo operations in Si3!

WARNING: Please, DO NOT USE the updated version of that plugin posted here:
	http://forum.unity3d.com/threads/script-inspector-3.195218/page-20#post-2414302

Thank you @inventor2010 for being awesome!!! :)


Script Inspector 3 - Version History
=====================================

New in version 3.0.28:
- C# 5.0-7.3 support:
  * using static directive
  * "in" parameters
  * expression-bodied operators
  * "when" in catch statements
  * pattern matching in switch statements
  * ref returns
  * local ref variables
  * ref assignments
  * conditional ref expressions
  * ref structs
- Fixed flickering autocomplete list - thanks @Ksanone & @magnox7
- Fixed compile errors in Unity 2019.1 - thanks @BradZoob
- Fixed parsing explicit implementation of indexers in generic interfaces - thanks @qiwulun
- Fixed "word stops" on non-ascii letters - thanks @zeiksz
- Fixed auto-indent when it's disabled - thanks @ahp275
- Fixed tokenizing preprocessor directive argument - thanks @Sarinen
- Fixed invalid argument exception on right-click - thanks @Sarinen
- Fixed an index out of bounds exception
- Fixed unnecessary delay when typing the first character
- Fixed Monospaced Font button in SI Console

New in version 3.0.27:
- C# 5.0 to C# 7.3 support:
  * async and await contextual keywords
  * Null-conditional ?. operator
  * Expression-bodied methods, constructors, finalizers, properties, property getters and setters, indexers, indexer getters and setters, and event adders and removers
  * Initializers for auto-implemented properties
  * String interpolation
  * Fixed the nameof operator
- New option to control auto-indenting in text assets - thanks @bobueland
- Workaround for resizing autocomplete list - thanks @haywirephoenix
- Fixed Cmd-Y binding on Mac for Go To Definition - thanks @Terko
- Fixed unintended autocompletion on declaring local variable names starting with 'a', 'i', or 'n'
- Fixed out of range exception on pinging non-existent line
- Fixed warnings about "Window/Panel/1" not existing

New in version 3.0.26:
- Compatibility updates for:
  * Editing in the Inspector window
  * Si3 popups in Unity 2018.3+
  * Highlighting the selected autocomplete item
  * Positioning of floating tabs in Unity 2019.1+
  * Si3 Preferences in Unity 2018.3+
  * SI Console in Unity 2019.3+
  * Handling tab-switching shortcuts in Unity 2019.2+
- Workaround for unlocking reloading assemblies incorrectly locked by Unity Editor in Unity 2019.2+
- Workaround for keeping current tab's focus on Save
- Added all built-in Console window menu items to SI Console
- Restored the option to disable handling Ctrl+Shift+F globally
- Fixed modified line indicator position on horizontal scrolling
- Fixed the foldout GUIStyle in the shader inspector
- Fixed a rare NRE in the parser
- Fixed opening scripts by drag-dropping prefabs
- Fixed opening only certain types of assets

New in version 3.0.25:
- Added option to auto-move opening brace to next/empty line - thanks @RainbowWhale
- Updated setting Si3 tabs position for Unity 2018.3+ - thanks @jrdev
- Fixed saving of docked/floating state of Si3 tabs
- Fixed keyboard shortcut for the Find in Files command - thanks @dpizzle & @jrdev
- Fixed up/down arrow keys not working sometimes - thanks @sngdan
- Other minor fixes

New in version 3.0.24:
- Made the Auto-Complete Great Again - thanks @JoeStrout
- Added option to disable triple-click line selection - thanks @Kougasama
- Re-enabled keyboard shortcut hints in context menus on OS X
- Allowed showing find/replace terms in history lists even when they contain an underscore
- Fixed Si3 popup windows appearing behind its floating tabs in Unity 2018.3+ - thanks @ElevenGame et al.
- Fixed opening Script Inspector Preferences in Unity 2018.3+
- Fixed leaking typed-in characters as global shortcuts in Unity 2018.3+ - thanks @dpizzle
- Fixed lost selection on pressing Cmd/Ctrl key while dragging mouse to select text - thanks @Kougasama
- Fixed inconsistent caret placement on mouse clicks - thanks @lcs_tlf

New in version 3.0.23:
- Added "Save All and Reload Assemblies" to main Si3 menu as a - Added "Edit this Editor class" context menu on MonoBehaviour-s shown in the Inspector - thanks @pdyxs
- Added support for nameof contextual keyword in C# 6.0 - thanks @Rocktavious
- Added Cmd-S shortcut in Unity 2018.3+ on OS X
- Added "Reset SI Tabs Position" in the Si3 main menu - thanks @Fattie
- Added "Close All SI Tabs" in the Si3 main menu workaround for a bug in handling shortcuts in Unity on OS X - thanks @halley
- Added an option to disable the auto-indent feature - thanks @nomax5
- Excluded code analysis on scripts in WebGLTemplates and StreamingAssets folders
- Disabled expanding tab titles on mouseover in Unity 2018.3+
- Fixed Unity crash on OS X on hiding tooltip windows - thanks @Fattie
- Fixed auto-docking Si3 tabs in Unity 2018.3+
- Fixed use of members of a type nested in a generic class - thanks @dsafew
- Fixed error on Find All References with .Net 4.6+ - thanks @sngdan
- Fixed freezing on auto-scroll in Unity 2018.3
- Fixed main menu keyboard shortcuts in Unity 2018.3 - thanks @xxhaissamxx
- Fixed Si3 popup windows stealing focus in Unity 2018.3.0b7+ - thanks @ok8596
- Fixed closing Si3 tooltip windows in Unity 2018.3.0b10
- Fixed a NullReferenceException on reloading assemblies - thanks @thienhaflash
- Fixed error on reading certain assemblies in Unity 2017.3+ - thanks @JoeStrout
- Fixed an IndexOutOfRange exception - thanks @thienhaflash
- Fixed resolving assembly references for assemblies loaded in reflection-only context
- Fixed error on CreateInstance<T> in Unity 4
- Optimized reflecting all members of types defining extension methods

New in version 3.0.22:
- Faster building of parse trees, semantic analysis, and many other optimizations
- Resolving methods based on named arguments - thanks @_Adriaan
- Improved compatibility with other plugins - thanks @MostHated
- Added "Close SI Tabs to the Right" command on SI tabs - thanks @JoeStrout
- Added "Copy as Path" command on SI tabs.
- Added printing of text assets with Notepad++ on Windows - thanks @wood333
- Added progress indicator to Find Results windows
- Updated DejaVu Sans Mono font to latest version and added its Bold variant - thanks @A0101A
- Tab Switcher window handles mouse-clicks now
- Fixed issues with .Net 4.6 - thanks @sngdan
- Fixed "This visualElement is not my child" error - thanks @syscrusher, et al.
- Fixed a type cast error - thanks @tosiabunio
- Fixed an exception while finding all references

New in version 3.0.21:
- Added full support for the new Assembly Definitions in Unity 2017.3 - thanks @sngdan and @Zbad
- Added support for #define symbols in .rsp files - thanks @_Adriaan
- Added option to use monospaced font in Console - thanks Arisha
- New shortcut: Shift+Enter inserts a new line below and moves the cursor there - thanks @Zahorodnii
- New shortcut: Escape key in Find Results and References tabs goes back to the last SI tab
- Disabled auto-indentation of preprocessor directives
- Fixed exception on finding references to methods - thanks @Zbad
- Fixed resolving inherited members from constructed base types - thanks @SweatyChair
- Fixed accepting autocomplete with Tab key when Insert Spaces on Tab Key option is turned on - thanks @tosiabunio
- Fixed positioning in Unity 2017+ after toggling floating tabs - thanks https://twitter.com/loolo78
- Fixed color themes in Unity 2018.1 Beta - thanks @Xype and @zephyr7
- Fixed positioning of Find Results, Replace and References tabs
- Fixed an error on closing Si3 popup windows in recent Unity versions

New in version 3.0.20:
- Added option to insert Spaces instead of Tabs
- Fixed auto-indenting comments on Paste - thanks @jrDev
- Fixed position of SI Console Auto-focus button in Unity 2017.x
- Fixed deprecated field compile warning in Unity 2017.2

New in version 3.0.19:
- Massive improvements in resolving generics, extension methods, method overloads, and implicitly typed lambda parameters!
- Added Ctrl+Period as an alternative shortcut for Code Fixes on OS X
- Toggle Floating Tabs command now first sets the focus on those tabs, then hides them, and then shows them - thanks @mStep
- Unity 2017.x compatibility - thanks @Andrew_Howe & @sxa
- Tweaked reference highlighting colors in Darcula theme - thanks @roberto_sc
- Fixed building list of referenced assemblies - thanks @Slaye & @sngdan
- Fixed evaluation of some #elif and #else preprocessor blocks - thanks @_Adriaan
- Fixed using-alias types of generic types - thanks @thienhaflash
- Fixed resolving nested method invocation expressions
- Fixed NRE on opening scripts from some other plugins
- Unity 4.0.0 backward compatibility

New in version 3.0.18:
- Critical fix for "Multiple Managers" error - thanks @ramroom4444
- Massive optimizations - thanks @sngdan
- Smarter suggestions in autocomplete list - thanks @JoeStrout
- Added support for Spotlight Inspector - thanks @PedroGV
- Color themes extracted to their own folder - thanks @Novack :)
- Added code infrastructure for code refactoring
- Code refactoring: Resolve type by adding using statement and namespace qualifier
- Added folding button and count indicator to Si3's UnityEvent property drawer - thanks @JoeStrout
- Autocomplete list shows up immediately now on OS X as well
- Autocomplete list shows up now also when typing in middle of a word (or at its end)
- Arguments tooltips now list all overload of a method, including overloads declared in base classes
- Si3 now doesn't ask to save or keep changes in memory on hiding floating tabs
- Si3 now respects implicit conversion operators
- Improved smooth scrolling, ping animation, cursor blinking and everything else that used to rely on Time.realTimeSinceStartup and its lack of numeric precision
- Improved incremental semantic code analysis
- Improved resolving of symbols defined in partial types
- Improved type inference of implicitly types lambda parameters
- Improved resolving of method overloads
- Improved Find All References
- Improved script loading time
- Prevented unintentional font size change on pressing Ctrl after using mouse-wheel with inertia
- Allowed smooth scrolling on mouse-wheel
- Better positioning of context menus on code
- Fixed Si3 UnityEventsDrawer for private fields defined in a base class - thanks @thienhaflash
- Fixed Shift+Space not working in other Unity tabs - thanks @gyltefors
- Fixed opening scripts with Cmd-Down arrow on OS X - thanks @roberto_sc
- Fixed scroll area getting stuck at the bottom on retina displays - thanks @sngdan
- Fixed "Cut Line" command for empty lines on Windows - thanks @Victor_Kallai
- Fixed compile error in Unity 4.3 - thanks @thienhaflash
- Fixed displaying of conversion operators in the code navigation toolbar
- Fixed refreshing Si3 tabs after compile
- Fixed position of the code view inside the Inspector tab
- Fixed C# grammar for event declarations and explicit implementations of generic interfaces
- Fixed some missing Si3 tabs on Ctrl+Tab
- Fixed Go to Definition for some generic symbols
- Fixed resolving of attributes after adding their using statement
- Fixed filtering of code completions to attributes
- Fixed smart semicolon placement
- Fixed completions for extensions methods declared in a parent namespace
- Fixed combining of type modifiers on partial types
- Fixed resolving cast expressions
- Fixed base type of enum types
- Reverted previously added filtering of code completions to types only

New in version 3.0.17:
- Si3 tabs auto-docking updated for Unity 5.5.0 - thanks @jrDev & @JoeStrout
- Added autocompletion filtering when only a type is expected - thanks @laurentlavigne
- Added Shift+F10 as an alternative shortcut to Context Menu key
- Added option for ordering members in Code Navigation Toolbar by name or in order of appearance - thanks @Thon Lorenz
- Aligned context menu with the token under caret
- Added option to disable live inspection of property values - thanks @_Adriaan
- Added filtering option for unresolved symbols in References window
- Improved incremental code analysis for generic partial types - thanks @eagleeyez
- Fixed text flickering on pressing PageDown at end of file
- Fixed navigation to operator members using Code Navigation Toolbar
- Fixed grouping by #region of operator members
- Fixed Context Menu shortcut not always working
- Fixed a NullRef on context menu - thanks @thienhaflash
- Fixed excessive width of dropdown menu in Code Navigation Toolbar - thanks @JoeStrout
- Fixed default position when opening new tabs - thanks @laurentlavigne
- Fixed context menu on some Si3 tabs titles
- Fixed restoring focus on toggling floating tabs
- Fixed NullRef exception on deleting scripts opened in Si3 tabs - thanks @_Adriaan
- Fixed resolving of extension methods defined in parent namespace
- Fixed resolving type of jagged array fields - thanks @sngdan
- Fixed Go to Definition for generic methods
- Fixed NullRef in Si3 UnityEventDrawer - thanks @thienhaflash

New in version 3.0.16:
- Applied all @broberson's changes to allow compiling Si3 as a DLL
- Fixed exceptions when drawing uninitialized arrays of UnityEvent - thanks @thienhaflash
- Added support for Tooltip attribute on UnityEvent field - thanks @JoeStrout
- Fixed an exception on attempting to read a write-only property while constructing its tooltip text

Fixed in version 3.0.15f:
- Fixed resolving methods overloads with parameters of a generic delegate type for which a method group is specified as an argument - thanks @thienhaflash

New in version 3.0.15:
- Added easy navigation to handlers in your code from UnityEvent fields in the Inspector - thanks @JoeStrout
- Auto-fixing corrupted window layout data :)
- Customizable tabs size - thanks @dstanley
- Help on unresolved symbols opens search on Unity Scripting References - thanks @_Adriaan
- New option to disable changing font size with Ctrl/Cmd + MouseWheel - thanks @Mocho & @Sarinen
- SI tabs now show the filename and path
- Auto-closing SI tabs for missing scripts
- Cmd-Shift-W and Cmd-F4 are closing the current SI tab on OS X - thanks @_Adriaan & @mcmorry
- Fixed a crash of Unity with recently updated Mono runtime caused by infinite recursion while resolving certain constructed generic types - thanks @JoeStrout
- Removed unnecessary calls to EditorWindow.mouseOverWindow since accessing that property may crash Unity 5.4 on OS X - thanks @sngdan
- Attempt to avoid another crash in Unity 5.4 on OS X - thanks @sngdan
- Fixed initial repainting of SI tabs after reloading assemblies
- Fixed keyboard shortcut for Replace All command - thanks @Sarinen
- Fixed finding references to virtual properties - thanks @Eduardnaut
- Fixed listing operator method definitions in code navigation toolbar
- Fixed operator methods shown as completions
- Fixed resolving method overloads that take a parameter of type double - thanks @_Daniel_
- Fixed resolving extension methods hidden by a member with the same name - thanks @JoeStrout
- Fixed word wrap formatting on resize when docking SI tabs - thanks @AdamBuckner
- Fixed word wrap in Inspector view on retina displays - thanks @sngdan
- More retina display fixes

New in version 3.0.14:
- Search field shows "no results" when no results are found
- Disabled smooth scrolling for mousewheel events - thanks @Novack
- Fixed positioning of floating Si3 tabs - thanks @mcmorry, @JoeStrout, @SquareZhao
- Fixed color theme selection for text assets - thanks @2dgame
- Fixed a NullRef exception in FindMatchingMethod()
- Fixed a NullRef in FGTextEditor.DoGui()
- Fixed NullRef on Closing All Si3 Tabs

New in version 3.0.13:
- Tons of optimizations for speed and memory consumption
- Members are now listed in groups by #region in code navigation toolbar
- Added option to disable members grouping by #region
- New option: Always Open in External IDE - thanks @UnLogick
- Added Go to Type Definition feature - thanks @Jimww
- Added support for 4th (Go Back) and 5th (Go Forward) mouse buttons on Windows
- Added option to keep changes in memory without asking - thanks @Jimww
- Added C# rules for implicit conversions of numeric literals
- Better handling of C# operators
- Improved handling of constants and literals in C#
- Fixed C# code navigation toolbar for destructors, operators and constant declarations
- Fixed a typo in OnSelectionChange() magic method - thanks @bocs
- Fixed the error logged by Unity 5.4 beta
- Fixed autocompletion for namespaces distributed across multiple assemblies - thanks @DshFox
- Fixed C# grammar rules for "orderby" keyword in LINQ expressions
- Improved C# symbol resolving for method groups used as delegate targets
- Improved incremental semantic analysis
- Improved resolving of method overloads
- Fixed resolving of base types for some types defined in DLL's
- Fixed resolving of parameter names in some specific cases
- Fixed theme colors when Color Space is set to Linear
- Fixed a index out of range error - thanks @thienhaflash
- Fixed "second F12 goes back" after moving the caret with a mouse click - thanks @castor76
- Fixed a tab-switching bug
- Improved text buffer loading speed after reloading assemblies
- Fixed handling of changes made in-memory after reloading assemblies

New in version 3.0.12:
- Critical fix! Fixed smart semicolon crash - thanks @bocs
- After pressing F12 to go to definition, pressing it again returns the cursor back - thanks @Victor_Kallai
- New Shift+Delete behavior on Windows: "Cuts" the current line to clipboard unless there's nothing selected and "Copy/Cut full line if no selection" is turned off (in which case it will delete the line, same as before) - thanks @ddt2015 and @FatIgor
- Disabled live inspection of 'mesh' and 'material' properties to avoid unintentional creation of unique instances - thanks @ElSenyor_Eduard
- Fixed smart semicolon in lines ending with comments - thanks @jrDev
- Fixed compile warning in FGConsole for Unity 5.4 beta
- Fixed exception on closing Find Results window
- Fixed resolving method declarations with syntax errors - thanks @Gorgor
- Fixed copying full lines and then pasting them in another file - thanks @ElSenyor_Eduard
- Fixed displaying shortcuts in context menus in Unity 5.3+ on Windows - thanks @bocs
- Fixed finding (non) references in preprocessor directives - thanks @castor76

New in version 3.0.11:
- Updated for compatibility with Unity 4.7.0
- Auto-expanding /// as XMLDoc comments
- Fixed resolving of destructors and showing them in breadcrumbs
- Fixed resolving generic method overloads which was breaking the parameter hints - thanks @Sarper Soher
- Fixed Results windows after maximizing and restoring a tab - thanks @Sarper Soher

New in version 3.0.10:
- Find All References feature with results filtering
- Alt+Up/Down keys now move and re-indent line(s) - thanks @s1m0n1stv4n
- New search box behavior:
   * Enter/Shift+Enter finds next/previous occurrence and keeps keyboard focus on search box
   * Escape moves keyboard focus back to code editor
- Popup windows will close on any keyboard modifier and up/down arrows
- Resolving anonymous method expressions
- Updated for obsolete API in Unity 5.3
- "Show auto-complete on Esc" is now turned on by default on OS X instead on Windows - thanks @Kiupe
- Fixed Go To Definition in some cases
- Fixed resolving method overloads
- Fixed base type references in some reflected types - thanks @FireMutant & @Victor_Kallai

New in version 3.0.9:
- Replace in Files with ability to preview and select which occurrences to replace
- Global Undo/Redo after Replace in Files
- New cursor navigation mode that matches OS X text editing apps (optional, customizable, and even available on Windows) - thanks @JoeStrout
- New alternative shortcut for Duplicate Line(s) on OS X: Alt-Cmd-Down arrow
- New scope option for Find/Replace in Files: Current Tab
- Go to method overload definition - thanks @mcmorry
- Edit-in-memory dialog now shows the filename
- New hotkey: Alt+M (Ctrl-M on OS X) opens the last code navigation breadcrumb button - thanks @CaptainCatnip
- Optional non-aggressive auto-complete mode that only accepts completions with the Tab key - thanks @JoeStrout
- Auto-complete doesn't insist on accepting completions where lambdas are expected - thanks @JoeStrout
- Type parameter constraints are now used in resolving members and in auto-completion - thanks @thienhaflash
- Fixed NullRef while resolving overloads of a method with params parameter
- Fixed NullRef on toggling maximize tab
- Fixed NullRef in resolving interfaces on a constructed generic type
- Fixed conversions of constructed generic types - thanks @bocs
- Fixed NullRef in GetTokenSpan - thanks @thienhaflash
- Fixed opening shaders with Open Any File dialog - thanks @Sarper Soher
- Fixed resolving of pre-increment-expression and pre-decrement-expression
- Fixed the "multiple managers" warning - thanks @jrDev
- Fixed auto-generating override methods in some edge cases
- Fixed NullRef in Go to definition
- Fixed updating text buffers in some rare cases after Undo or Redo
- Fixed Unity Scripting Reference links for generic symbols
- Fixed arguments hints so that they remain hidden after hiding them with Esc key - thanks @thienhaflash
- Fixed selection priority of exactly typed names of auto-completion list items - thanks @JoeStrout
- Fixed expected argument type for extension methods
- Fixed keyboard handling in Tab Switcher if CapsLock or NumLock is on
- Changed on OS X to avoid conflicts: Controlling SI tabs with Alt-Ctrl-Left/Right arrows instead of Alt-Cmd-Left/Right on OS X

New in version 3.0.8:
- Updated editor scripts rules for Unity 5.2.1p4 and newer versions
- Unity 5+: Allowed editing assets of DefaultAsset type (currently for files of type: md, xaml, text, bat, cmd, sh, command, ini, rsp, plist, log, and lua)
- Smart semicolon placement (optional and disabled by default) - thanks @Novack
- Added alternative shortcut for Redo on Windows - Ctrl+Y - thanks @Victor_Kallai
- A smarter set of characters that trigger accepting suggested completions - thanks @Adam Buckner
- Color themes now support different colors for punctuators and operators - thanks @Korindian
- Tweaked Monokai tooltip colors - thanks @mcmorry
- Slightly increased font size in auto-complete lists - thanks @mcmorry
- Implemented the special handling of Nullable LHS operand for the null-coalescing operator
- Fixed code generator for override methods - thanks @thienhaflash
- Fixed an error in Execute Static Method command (Ctrl/Cmd+E) - thanks @mcmorry
- Fixed resolving generic methods overloaded with a non-generic one - thanks @mcmorry
- Fixed code generator for relative names of members of a nested types and nested namespaces - thanks @mcmorry
- Fixed duplicated suggestions of enums and constructors after new
- Fixed resolving of qualified identifiers in explicit interface implementation methods
- Fixed implicit conversions of Nullable<T> to T - thanks @Victor_Kallai
- Fixed resolving conversions for constructed generic types
- Fixed Open at Line shortcut in Unity 5 on OS X - thanks @mcmorry
- Fixed an error in ConstructedTypeDefinition.BaseType() - thanks @thienhaflash
- Fixed the error when trying to open a built-in shader in Si3
- Fixed Find Results window after searching for text that starts or ends with whitespace characters

New in version 3.0.7:
- Auto-generated override methods
- New toolbar button: Version Control
- Massively improved type inference for generic methods and lambda parameters
- Added option to Find Text in the open tabs only
- Using only local Unity documentation when internet is not available
- Bug fixes

New in version 3.0.6:
- Partial classes, structs & interfaces are supported now
- Magic methods respect implementation in a base class
- Group by File & Keep Results added to Find Results window
- Bug fixes

New in version 3.0.5:
- Fixed finding full lines matching the search string in Find in Files
- Fixed searching for TextAssets in Find in Files
- Added search history to Find in Files window
- Added auto-focus options to SI Console
- New color theme: VS Dark with ReSharper (thanks Sarper Soher!)
- Xcode theme update to Xcode 5 (thanks inventor2010!)

New in version 3.0.4:
- Added smart code snippets for generating magic methods for MonoBehaviour, Editor, EditorWindow, AssetPostprocessor, ScriptableWizard, and ScriptableObject classes
- Grouped all Si3 related main menu commands in a single place under Window->Script Inspector 3
- Tab switcher is now accessible from any Si3 window
- Si3 Preferences accessible from menus
- Support for Unity's built-in version control integrations
- Fixed keyboard shortcut for Find in Files on OS X
- Fixed read/write reference highlighting
- Fixed generic types inference in extension methods

New in version 3.0.3:
- Find in Files! :)
- Support for Smart Code Snippets (including user-defined ones)
- Smart Code Snippet to auto-generate property for a field
- Inspecting fields and properties of Component and derived classes for all scene objects or the one selected
- Improved support for generics and extension methods
- Improved auto-suggestions for enums and after the 'new' keyword
- Improved type inference for lambda parameters
- Improvements in auto-completion
- Added option to Cut or Copy full line of text when there is no selection
- Search field shows whitespaces when not focused
- Bug fixes

New in version 3.0.2:
- Auto-suggestions for enum literals and constructors after "new"
- Added "Open File in Si3" and "Open Any File in Si3" extensions under the File menu
- New option to use the online version of Unity Scripting Reference instead of the local one
- Bug fixes and improvements


New in Version 3.0.0:


C# Specific Features:

- Automatic code completion, a.k.a. Intellisense
- Lightning fast incremental parsing and code analysis
- Semantic highlighting
- Semantic info tooltips for symbols
- Semantic and syntax errors highlighting
- Parameter hints for method's arguments
- Customizable code snippets
- Auto-generating Unity event handlers (Magic Methods)
- Auto-generating override methods
- Automatic code indentation
- Symbol reference highlighting
- Go To Definition for any symbol defined in source code
- Go To Definition for .Net symbols
- Semantic info powered Scripting Reference for all Unity symbols
- Semantic info powered MSDN Reference for .Net symbols
- Semantic info powered C# Language Reference for keywords
- Short description for Unity symbols in tooltips
- Code Navigation toolbar including Go To #region
- Execute Static Methods from context-menu


All Script Types and Shader Features:

- Significantly faster tokenizer and reduced loading time
- Auto-closing braces, brackets, parentheses, and double-quotes
- Matching braces/brackets/parentheses highlighting
- Quick Save alternative option (without compile)


Other Features:

- Extensive list of keyboard shortcuts for editing
- Shortcuts to switch between active Si3 windows
- Navigation history
- Smooth scrolling
- Toggle (Show/Hide) all floating Si3 windows
- Script Inspector options page in Unity Preferences window
- P4Connect integration


Optional Experimental Features:

- Inspect simple type values of static C# fields and properties
- Inspect simple type values of non-static C# fields and properties for instances derived from Component or ScriptableObject
- Auto-Expanding tab titles for Script Inspector windows
- Compile in Background (on Windows only)


Main Features in Previous Versions:

- Editing scripts, shaders, and text files
- Advanced editor with extensive mouse and keyboard support
- Undo and Redo functions for each file independently
- Editing in the Inspector or in dedicated dockable windows
- Syntax highlighting for scripts and shaders
- Word-wrap option
- Improved Console window with call stack navigation
- Fast editor for really, really long files
- Fast editor for really long single line files (no, even Visual Studio can't do that!)
- Shader code editing directly in the shader inspector
- Variable font sizes
- Text search and quick-search shortcuts
- Track changes indicators
- Preserved text encoding and line ending style
- Automatic saving before entering game mode
- External changes detection and reloading
- Multiple color themes
- Multiple fonts


The Best "Feature":

- Full source code included!!!
